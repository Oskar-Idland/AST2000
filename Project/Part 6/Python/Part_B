import numpy as np
import matplotlib.pyplot as plt
import ast2000tools.constants as constants
from numba import njit as TURBOOOO
c = constants.c
k = constants.k_B
u = 1.6605402E-27



def convert_data():
    '''
    Has to be run the first time program is used to convert text files to npy files
    '''
    with open('Flux Data\sigma_noise.txt', 'r') as f:
        data = []
        for line in f.readlines():
            data.append([float(line.split()[0]), float(line.split()[1])])

    np.save('Flux Data\sigma_noise', data)

    with open('Flux Data\Flux.txt', 'r') as f:
        data = []
        for line in f.readlines():
            data.append([float(line.split()[0]), float(line.split()[1])])

    np.save('Flux Data\Flux', data)
    

# convert_data()
flux_data = np.load('Flux Data\Flux.npy')
wavelengths = flux_data[:, 0]
Φ = flux_data[:, 1]
noise = np.load('Flux Data\sigma_noise.npy')[:, 1]


@TURBOOOO
def σ(λ_0, m, T):
    '''
    Standard deviation of a spectral line's Gaussian line profile
    '''
    return λ_0 / c * np.sqrt((k*T)/m)


@TURBOOOO
def GLD(f_min, λ_0, λ, σ):
    '''
    Gaussian Line Distribution
    '''
    return 1 + (f_min - 1)*np.exp(-.5*((λ - λ_0)/σ)**2)


@TURBOOOO(fastmath=True)
def χ_Squared(flux, data: np.ndarray, GLD, σ, λ_0: float, m: float, tol=1e-10):
    '''
    Finds the best parameters of the gas in the atmosphere based on known values of spectral lines\n

    data    - Array of data point\n
    f       - Function to evaluate the data\n
    σ       - Function to evaluate the standard deviation\n
    λ_0     - Central spectral line of gas in question\n
    m       - Mass of a molecule of the gas in question\n

    Returns: Flux and temperature, corresponding to the lowest χ squared and the slice of data used together with the lowest χ squared.  
    '''
    # TODO: Sjekk om riktig formel
    # Doppler shift by max velocity of 10 000 m/s with max temp of 450 k
    Δλ = λ_0*(10_000 + ((2*k*450)/m)**.5)/c
    N = 50
    # Range of possible temperatures on planet
    temps = np.linspace(150, 450, N)
    # Range of minimum flux at center of spectral line
    f_mins = np.linspace(0.7, 1, N)
    # Range of wavelengths adjusted for doppler shift
    wavelengths = np.linspace(λ_0 - Δλ, λ_0 + Δλ, N)
    lowest_value = 1e20
    index1 = np.where(np.abs(data - (λ_0 - Δλ)) < tol)[0][0]
    index2 = np.where(np.abs(data - (λ_0 + Δλ)) < tol)[0][-1]
    data_slice = data[index1:index2]
    flux_slice = flux[index1:index2]
    noise_slice = noise[index1:index2]
    σ_noise = np.std(noise_slice)
    for T in temps:
        σ_t = σ(λ_0, m, T)
        for f_min in f_mins:
            for λ in wavelengths:
                computed = GLD(f_min, data_slice, λ, σ_t)
                result = np.sum( ((flux_slice - computed) / σ_noise)**2 )
                if result < lowest_value:
                    lowest_value = result
                    f_min_lowest = f_min
                    temp_lowest = T
                    computed_lowest = computed
                    
    return f_min_lowest, temp_lowest, data_slice, flux_slice, noise_slice, computed_lowest, Δλ*1E9


def plot(data_slice, flux_slice, computed, name, λ_0):
    center_index = int(np.argmin(computed))
    # plt.plot(data_slice[center_index - 100:center_index + 100]*1e9, flux_slice[center_index - 100:center_index + 100]/np.linalg.norm(flux_slice[center_index - 100:center_index + 100]), label = 'Measured flux')
    Δi = 100
    plt.plot(data_slice[center_index - Δi:center_index + Δi]*1e9,
             computed[center_index - Δi:center_index + Δi], label=f'λ_0 = {λ_0}')
    plt.title(f'Gaussian line profile of {name}')
    plt.xlabel(r'λ (nm)')
    plt.ylabel('Flux')
    plt.legend(loc = 'lower left')


def plot_gases():

    i = 1
    for gas in gases:
        plt.subplot(2, 3, i)
        for λ_0 in gas['Spectral Lines']:
            data_slice = gas[f'result {λ_0}']['data_slice']
            flux_slice = gas[f'result {λ_0}']['flux_slice']
            computed = gas[f'result {λ_0}']['computed']
            name = gas['name']
            plot(data_slice, flux_slice, computed, name, λ_0)
        i += 1
    plt.show()


def compute_print():

    print('Gas|Wavelength (nm)|Min. Flux (W/m^3)|T (K)| Δλ')
    print('---|---------------|-----------------|-----|-------')
    for gas in gases:
        m = gas['mass']
        name = gas['name']
        for λ_0 in gas['Spectral Lines']:
            flux, temp, data_slice, flux_slice, noise_slice, computed, Δλ = χ_Squared(
                Φ, wavelengths/1E9, GLD, σ, λ_0/1E9, m)
            print(f'{name:^4}{λ_0:^16.0f}{flux:^18.2f}{temp:^6.1f}{Δλ:^8.2e}')
            gas[f'result {λ_0}'] = {'flux': flux, 'temp': temp, 'data_slice': data_slice,
                                    'flux_slice': flux_slice, 'noise_slice': noise_slice, 'computed': computed}


# Gases and their properties stored in dictionaries
O2  = {'name': 'O2',   'Spectral Lines': [632, 690, 760], 'mass': 15.9994*2*u}
H2  = {'name': 'H2',   'Spectral Lines': [720, 820, 940], 'mass': 1.00794*2*u}
CO2 = {'name': 'CO2',  'Spectral Lines': [1400, 1600],    'mass': (12.0107 + 15.9994*2)*u}
CH4 = {'name': 'CH4',  'Spectral Lines': [1660, 2200],    'mass': (12.0107 + 1.00794*4)*u}
CO  = {'name': 'CO',   'Spectral Lines': [2340],          'mass': (12.0107 + 15.9994)*u}
N20 = {'name': 'N20',  'Spectral Lines': [2870],          'mass': (14.0067*2 + 15.9994)*u}

gases = [O2, H2, CO2, CH4, CO, N20]

# TODO: Slett hvis alt fungerer. Er bare for å teste
# result = χ_Squared(Φ, wavelengths/1e9, f, σ, O2['Spectral Lines'][0]/1e9, O2['mass'])
# print('  Gas  |  Wavelength (nm) |  Min. Flux (W/m^3) |   T (K)')
# print('-------|------------------|--------------------|--------')
# print(f'{O2["name"]:^8}{result["Spectral line"]: ^18.0f}{result["min. flux"]:^22.2f}{result["Temp"]:^10.0f}')

if __name__ == '__main__':
    compute_print()
    plot_gases()


